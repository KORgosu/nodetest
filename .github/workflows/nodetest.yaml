name: Node.js CI/CD to Docker Hub

# 워크플로를 트리거할 이벤트 정의
on:
  push:
    branches: [main] # main 브랜치에 푸시될 때
  pull_request:
    branches: [main] # main 브랜치로 풀 리퀘스트가 생성될 때

# 워크플로를 구성하는 작업(Job)들
jobs:
  # 빌드 및 테스트 Job
  build:
    runs-on: ubuntu-latest # Ubuntu 최신 버전 환경에서 실행

    strategy:
      matrix:
        node-version: [14.x] # Node.js 14.x 버전을 사용

    # --- 중요: 'steps'는 'runs-on' 및 'strategy'와 같은 레벨로 들여쓰기 되어야 합니다. ---
    steps:
      # 1. GitHub 저장소 코드 체크아웃
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Docker 빌드를 위해 전체 Git 히스토리를 가져옵니다.

      # 2. Node.js 환경 설정
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      # 3. 작업 디렉토리 설정 (추가된 부분)
      - name: Set working directory
        run: |
          # nodetest 디렉토리가 존재하면 해당 디렉토리로 이동
          if [ -d "nodetest" ]; then
            echo "Changing directory to nodetest"
            cd nodetest
            echo "::set-output name=current_dir::nodetest"
          else
            echo "No nodetest directory found, staying in root"
            echo "::set-output name=current_dir::."
          fi
        id: set_dir # 이 스텝의 ID를 설정하여 나중에 참조할 수 있도록 합니다.
        shell: bash

      # 4. 의존성 설치
      - name: Install dependencies
        # 'working-directory'를 동적으로 설정하여 올바른 경로에서 npm 명령이 실행되도록 합니다.
        working-directory: ${{ steps.set_dir.outputs.current_dir }}
        run: npm install

      # 5. 프로젝트 빌드 (build 스크립트가 있는 경우)
      - name: Build project
        working-directory: ${{ steps.set_dir.outputs.current_dir }}
        run: npm run build --if-present

      # 6. 테스트 실행
      - name: Run tests
        working-directory: ${{ steps.set_dir.outputs.current_dir }}
        run: npm test
