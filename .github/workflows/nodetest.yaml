name: nodejs CICD
# 구독할 이벤트
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
# jobs 단위로 개별 서버(정확히는 Docker 컨테이너 단위라고 한다.)에서 작업이 수행됩니다.
# 각 작업은 병렬로 실행 된다고 하는데, needs: build와 같이 표시해서 기다릴 수도 있습니다.
jobs:
  build:
# Ubuntu, Windows, MacOS를 지원하는데, Ubuntu로 진행하겠습니다.
    runs-on: ubuntu-latest
# node-version 과 같이 배열로 돼있으면, 해당 원소를 순회하면서 작업이 반복해서 실행됩니다.
# matrix 때문인지 배열만 될지도... (TODO)
# 응용해서 runs-on에 여러 OS에서 돌릴 수도 있습니다.
    strategy:
      matrix:
        node-version: [14.x] # 템플릿 기본값: [10.x, 12.x, 14.x]
      steps:
        - uses: actions/checkout@v2
        - name: Use Node.js ${{ matrix.node-version }}
          uses: actions/setup-node@v1
          with:
            node-version: ${{ matrix.node-version }}
        - run: npm install
        - run: npm run build --if-present
        - run: npm test
        
# --if-present 옵션은 npm 스크립트가 존재할 때만 실행시키라는 의미를 가집니다.
# 만약 build 스크립트가 없는 경우, 오류 없이 지나갑니다.

# steps는 작업 단위로 실행되는 명령어들입니다.
# 각 단계는 순차적으로 실행됩니다.
# uses는 GitHub에서 제공하는 액션을 실행하는 개념입니다.
# actions/checkout@v2는 GitHub에서 제공하는 액션으로, GitHub의 마지막 커밋을 체크아웃합니다.
# actions/setup-node@v1은 Node.js를 설치하는 액션입니다.
# run은 셸 스크립트와 동일하게 명령어를 실행하는 개념입니다.
# step에서 uses와 run의 차이는 uses는 존재하는 기능을 호출하는 것이고 run은 실행명령입니다.


# npm test는 package.json에 정의된 test 스크립트를 실행합니다.
# package.json에 test 스크립트가 정의되어 있지 않으면, 오류가 발생합니다.
# 만약 test 스크립트가 정의되어 있지 않으면, echo "Error: no test specified" && exit 1 명령어가 실행됩니다.
# 이 명령어는 "Error: no test specified"라는 메시지를 출력하고, 종료 코드를 1로 설정합니다.
# 따라서, test 스크립트가 정의되어 있지 않으면, 오류가 발생합니다.
