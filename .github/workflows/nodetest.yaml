name: Node.js CI # 워크플로의 이름

# 워크플로를 트리거할 이벤트 정의
on:
  push:
    branches: [main] # main 브랜치에 푸시될 때
  pull_request:
    branches: [main] # main 브랜치로 풀 리퀘스트가 생성될 때

# jobs 단위로 개별 서버(정확히는 Docker 컨테이너 단위)에서 작업이 수행됩니다.
# 각 작업은 병렬로 실행되지만, needs: build와 같이 표시해서 기다릴 수도 있습니다.
jobs:
  build: # 'build'라는 이름의 Job 정의
    # Ubuntu, Windows, MacOS를 지원하며, 여기서는 Ubuntu를 사용합니다.
    runs-on: ubuntu-latest

    # node-version과 같이 배열로 되어 있으면, 해당 원소를 순회하면서 작업이 반복해서 실행됩니다.
    # matrix 때문에 배열만 되는 것 같습니다. (TODO)
    # 응용해서 runs-on에 여러 OS에서 돌릴 수도 있습니다.
    strategy:
      matrix:
        node-version: [14.x] # Node.js 14.x 버전을 사용

    # uses 개념은 다른 사람이 작성한 내용을 실행하는 개념입니다.
    # actions/checkout: GitHub의 마지막 커밋으로 Checkout 합니다.
    # actions/setup-node: Node.js를 설치합니다.
    # run 개념은 명령어를 실행합니다. 셸 스크립트와 동일합니다.
    steps: # 이 Job에서 실행될 단계들 (steps)
      # 1. GitHub 저장소 코드 체크아웃
      - uses: actions/checkout@v2

      # 2. Node.js 환경 설정
      - name: Use Node.js ${{ matrix.node-version }} # 단계의 이름
        uses: actions/setup-node@v1 # 사용할 액션
        with: # 액션에 전달할 매개변수
          node-version: ${{ matrix.node-version }} # Node.js 버전 설정

      # 3. 의존성 설치 (npm install과 같은 기능, 자세한 내용은 npm ci 문서 참조)
      - run: npm install # 또는 npm ci

      # 4. 프로젝트 빌드 (build 스크립트가 존재할 때만 실행)
      # --if-present 옵션은 npm 스크립트가 존재할 때만 실행시키라는 의미입니다.
      # 만약 build 스크립트가 없는 경우, 오류 없이 지나갑니다.
      - run: npm run build --if-present

      # 5. 테스트 실행
      - run: npm test # package.json에 정의된 test 스크립트를 실행합니다.
                      # test 스크립트가 없으면 오류가 발생합니다.
